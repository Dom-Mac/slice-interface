/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SlicerProdInterface extends utils.Interface {
  contractName: "SlicerProd";
  functions: {
    "_addChildrenSlicer(uint256)": FunctionFragment;
    "_addPayees(address[],uint256[])": FunctionFragment;
    "_initialize(uint256,address,uint256,bool)": FunctionFragment;
    "_payProductFromSlice(address,uint32,uint16)": FunctionFragment;
    "_payProductFromSlicer(uint256,address,uint32,uint16)": FunctionFragment;
    "_updatePayees(address,address,uint256)": FunctionFragment;
    "addProduct(uint32,uint256,bool,bool,bool,uint32,bytes,bytes,uint256[],uint32[])": FunctionFragment;
    "isPayeeAllowed(address)": FunctionFragment;
    "isProduct(uint32)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "paused()": FunctionFragment;
    "paySLC(uint32[],uint16[])": FunctionFragment;
    "productPrice(uint32)": FunctionFragment;
    "release(address)": FunctionFragment;
    "released(address)": FunctionFragment;
    "removeProduct(uint32)": FunctionFragment;
    "setProductCategory(uint32,uint32)": FunctionFragment;
    "setProductInfo(uint32,bool,uint32,uint256)": FunctionFragment;
    "slicerInfo()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "toggleUSDPrice(uint32,bool)": FunctionFragment;
    "totalReceived()": FunctionFragment;
    "unreleased(address)": FunctionFragment;
    "validatePurchase(uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_addChildrenSlicer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_addPayees",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_initialize",
    values: [BigNumberish, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_payProductFromSlice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_payProductFromSlicer",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_updatePayees",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addProduct",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPayeeAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paySLC",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "productPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(functionFragment: "released", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductCategory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductInfo",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slicerInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleUSDPrice",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReceived",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unreleased", values: [string]): string;
  encodeFunctionData(
    functionFragment: "validatePurchase",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_addChildrenSlicer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_addPayees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_payProductFromSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_payProductFromSlicer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updatePayees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPayeeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paySLC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slicerInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleUSDPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unreleased", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatePurchase",
    data: BytesLike
  ): Result;

  events: {
    "AddedChildrenSlicer(uint256)": EventFragment;
    "ERC1155BatchReceived(address,address,uint256[],uint256[])": EventFragment;
    "ERC1155Received(address,address,uint256,uint256)": EventFragment;
    "ERC721Received(address,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PaymentReceived(address,uint256)": EventFragment;
    "ProductAdded(uint32,uint32,uint256,bool,bool,bool,uint32,address,bytes,uint256[],uint32[])": EventFragment;
    "ProductCategoryChanged(uint32,uint32)": EventFragment;
    "ProductCurrencyChanged(uint32,uint256,bool)": EventFragment;
    "ProductInfoChanged(uint32,bool,uint32,uint256)": EventFragment;
    "ProductPaid(address,uint32,uint16,uint256)": EventFragment;
    "ProductRemoved(uint32)": EventFragment;
    "SLCPaid(uint32[],uint16[],uint256)": EventFragment;
    "TriggeredRelease(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedChildrenSlicer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155BatchReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductCategoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductCurrencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductInfoChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SLCPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TriggeredRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AddedChildrenSlicerEvent = TypedEvent<
  [BigNumber],
  { slicerId: BigNumber }
>;

export type AddedChildrenSlicerEventFilter =
  TypedEventFilter<AddedChildrenSlicerEvent>;

export type ERC1155BatchReceivedEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[]],
  {
    contractAddress: string;
    from: string;
    tokenIds: BigNumber[];
    amounts: BigNumber[];
  }
>;

export type ERC1155BatchReceivedEventFilter =
  TypedEventFilter<ERC1155BatchReceivedEvent>;

export type ERC1155ReceivedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    contractAddress: string;
    from: string;
    tokenId: BigNumber;
    amount: BigNumber;
  }
>;

export type ERC1155ReceivedEventFilter = TypedEventFilter<ERC1155ReceivedEvent>;

export type ERC721ReceivedEvent = TypedEvent<
  [string, string, BigNumber],
  { contractAddress: string; from: string; tokenId: BigNumber }
>;

export type ERC721ReceivedEventFilter = TypedEventFilter<ERC721ReceivedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export type ProductAddedEvent = TypedEvent<
  [
    number,
    number,
    BigNumber,
    boolean,
    boolean,
    boolean,
    number,
    string,
    string,
    BigNumber[],
    number[]
  ],
  {
    productId: number;
    categoryIndex: number;
    price: BigNumber;
    isUSD: boolean;
    isMultiple: boolean;
    isInfinite: boolean;
    availableUnits: number;
    creator: string;
    data: string;
    subSlicersId: BigNumber[];
    subProducts: number[];
  }
>;

export type ProductAddedEventFilter = TypedEventFilter<ProductAddedEvent>;

export type ProductCategoryChangedEvent = TypedEvent<
  [number, number],
  { productId: number; categoryIndex: number }
>;

export type ProductCategoryChangedEventFilter =
  TypedEventFilter<ProductCategoryChangedEvent>;

export type ProductCurrencyChangedEvent = TypedEvent<
  [number, BigNumber, boolean],
  { productId: number; productPrice: BigNumber; isUSD: boolean }
>;

export type ProductCurrencyChangedEventFilter =
  TypedEventFilter<ProductCurrencyChangedEvent>;

export type ProductInfoChangedEvent = TypedEvent<
  [number, boolean, number, BigNumber],
  {
    productId: number;
    isInfinite: boolean;
    units: number;
    productPrice: BigNumber;
  }
>;

export type ProductInfoChangedEventFilter =
  TypedEventFilter<ProductInfoChangedEvent>;

export type ProductPaidEvent = TypedEvent<
  [string, number, number, BigNumber],
  { from: string; productId: number; quantity: number; productPrice: BigNumber }
>;

export type ProductPaidEventFilter = TypedEventFilter<ProductPaidEvent>;

export type ProductRemovedEvent = TypedEvent<[number], { productId: number }>;

export type ProductRemovedEventFilter = TypedEventFilter<ProductRemovedEvent>;

export type SLCPaidEvent = TypedEvent<
  [number[], number[], BigNumber],
  { serviceIds: number[]; quantities: number[]; amount: BigNumber }
>;

export type SLCPaidEventFilter = TypedEventFilter<SLCPaidEvent>;

export type TriggeredReleaseEvent = TypedEvent<
  [string, BigNumber],
  { payee: string; released: BigNumber }
>;

export type TriggeredReleaseEventFilter =
  TypedEventFilter<TriggeredReleaseEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface SlicerProd extends BaseContract {
  contractName: "SlicerProd";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SlicerProdInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addChildrenSlicer(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _addPayees(
      accounts: string[],
      shares_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _initialize(
      tokenId_: BigNumberish,
      slicerCreator_: string,
      minimumShares_: BigNumberish,
      isCollectible_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _payProductFromSlice(
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _payProductFromSlicer(
      tokenId: BigNumberish,
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _updatePayees(
      accountFrom: string,
      accountTo: string,
      transferredShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProduct(
      categoryIndex: BigNumberish,
      price: BigNumberish,
      isUSD: boolean,
      isMultiple: boolean,
      isInfinite: boolean,
      units: BigNumberish,
      data: BytesLike,
      purchaseData: BytesLike,
      subSlicersId_: BigNumberish[],
      subProducts_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPayeeAllowed(
      payee: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    paySLC(
      serviceIds: BigNumberish[],
      quantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    productPrice(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    release(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    released(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    removeProduct(
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProductCategory(
      productId: BigNumberish,
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProductInfo(
      productId: BigNumberish,
      isInfinite: boolean,
      newUnits: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slicerInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, BigNumber] & {
        version: number;
        creator: string;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toggleUSDPrice(
      productId: BigNumberish,
      isUSD: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    unreleased(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validatePurchase(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;
  };

  _addChildrenSlicer(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _addPayees(
    accounts: string[],
    shares_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _initialize(
    tokenId_: BigNumberish,
    slicerCreator_: string,
    minimumShares_: BigNumberish,
    isCollectible_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _payProductFromSlice(
    account: string,
    productId: BigNumberish,
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _payProductFromSlicer(
    tokenId: BigNumberish,
    account: string,
    productId: BigNumberish,
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _updatePayees(
    accountFrom: string,
    accountTo: string,
    transferredShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProduct(
    categoryIndex: BigNumberish,
    price: BigNumberish,
    isUSD: boolean,
    isMultiple: boolean,
    isInfinite: boolean,
    units: BigNumberish,
    data: BytesLike,
    purchaseData: BytesLike,
    subSlicersId_: BigNumberish[],
    subProducts_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPayeeAllowed(payee: string, overrides?: CallOverrides): Promise<boolean>;

  isProduct(productId: BigNumberish, overrides?: CallOverrides): Promise<void>;

  onERC1155BatchReceived(
    arg0: string,
    from: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    from: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    from: string,
    tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  paySLC(
    serviceIds: BigNumberish[],
    quantities: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  productPrice(
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  release(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  released(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  removeProduct(
    productId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProductCategory(
    productId: BigNumberish,
    categoryIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProductInfo(
    productId: BigNumberish,
    isInfinite: boolean,
    newUnits: BigNumberish,
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slicerInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, string, BigNumber] & {
      version: number;
      creator: string;
    }
  >;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toggleUSDPrice(
    productId: BigNumberish,
    isUSD: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalReceived(overrides?: CallOverrides): Promise<BigNumber>;

  unreleased(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  validatePurchase(
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
  >;

  callStatic: {
    _addChildrenSlicer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _addPayees(
      accounts: string[],
      shares_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    _initialize(
      tokenId_: BigNumberish,
      slicerCreator_: string,
      minimumShares_: BigNumberish,
      isCollectible_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    _payProductFromSlice(
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _payProductFromSlicer(
      tokenId: BigNumberish,
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _updatePayees(
      accountFrom: string,
      accountTo: string,
      transferredShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addProduct(
      categoryIndex: BigNumberish,
      price: BigNumberish,
      isUSD: boolean,
      isMultiple: boolean,
      isInfinite: boolean,
      units: BigNumberish,
      data: BytesLike,
      purchaseData: BytesLike,
      subSlicersId_: BigNumberish[],
      subProducts_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isPayeeAllowed(payee: string, overrides?: CallOverrides): Promise<boolean>;

    isProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    paySLC(
      serviceIds: BigNumberish[],
      quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    productPrice(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    release(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    released(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProductCategory(
      productId: BigNumberish,
      categoryIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProductInfo(
      productId: BigNumberish,
      isInfinite: boolean,
      newUnits: BigNumberish,
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slicerInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, BigNumber] & {
        version: number;
        creator: string;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toggleUSDPrice(
      productId: BigNumberish,
      isUSD: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalReceived(overrides?: CallOverrides): Promise<BigNumber>;

    unreleased(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    validatePurchase(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;
  };

  filters: {
    "AddedChildrenSlicer(uint256)"(
      slicerId?: BigNumberish | null
    ): AddedChildrenSlicerEventFilter;
    AddedChildrenSlicer(
      slicerId?: BigNumberish | null
    ): AddedChildrenSlicerEventFilter;

    "ERC1155BatchReceived(address,address,uint256[],uint256[])"(
      contractAddress?: string | null,
      from?: string | null,
      tokenIds?: null,
      amounts?: null
    ): ERC1155BatchReceivedEventFilter;
    ERC1155BatchReceived(
      contractAddress?: string | null,
      from?: string | null,
      tokenIds?: null,
      amounts?: null
    ): ERC1155BatchReceivedEventFilter;

    "ERC1155Received(address,address,uint256,uint256)"(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null,
      amount?: null
    ): ERC1155ReceivedEventFilter;
    ERC1155Received(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null,
      amount?: null
    ): ERC1155ReceivedEventFilter;

    "ERC721Received(address,address,uint256)"(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null
    ): ERC721ReceivedEventFilter;
    ERC721Received(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null
    ): ERC721ReceivedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PaymentReceived(address,uint256)"(
      from?: string | null,
      amount?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(
      from?: string | null,
      amount?: null
    ): PaymentReceivedEventFilter;

    "ProductAdded(uint32,uint32,uint256,bool,bool,bool,uint32,address,bytes,uint256[],uint32[])"(
      productId?: BigNumberish | null,
      categoryIndex?: BigNumberish | null,
      price?: null,
      isUSD?: null,
      isMultiple?: null,
      isInfinite?: null,
      availableUnits?: null,
      creator?: string | null,
      data?: null,
      subSlicersId?: null,
      subProducts?: null
    ): ProductAddedEventFilter;
    ProductAdded(
      productId?: BigNumberish | null,
      categoryIndex?: BigNumberish | null,
      price?: null,
      isUSD?: null,
      isMultiple?: null,
      isInfinite?: null,
      availableUnits?: null,
      creator?: string | null,
      data?: null,
      subSlicersId?: null,
      subProducts?: null
    ): ProductAddedEventFilter;

    "ProductCategoryChanged(uint32,uint32)"(
      productId?: BigNumberish | null,
      categoryIndex?: null
    ): ProductCategoryChangedEventFilter;
    ProductCategoryChanged(
      productId?: BigNumberish | null,
      categoryIndex?: null
    ): ProductCategoryChangedEventFilter;

    "ProductCurrencyChanged(uint32,uint256,bool)"(
      productId?: BigNumberish | null,
      productPrice?: null,
      isUSD?: null
    ): ProductCurrencyChangedEventFilter;
    ProductCurrencyChanged(
      productId?: BigNumberish | null,
      productPrice?: null,
      isUSD?: null
    ): ProductCurrencyChangedEventFilter;

    "ProductInfoChanged(uint32,bool,uint32,uint256)"(
      productId?: BigNumberish | null,
      isInfinite?: null,
      units?: null,
      productPrice?: null
    ): ProductInfoChangedEventFilter;
    ProductInfoChanged(
      productId?: BigNumberish | null,
      isInfinite?: null,
      units?: null,
      productPrice?: null
    ): ProductInfoChangedEventFilter;

    "ProductPaid(address,uint32,uint16,uint256)"(
      from?: string | null,
      productId?: BigNumberish | null,
      quantity?: null,
      productPrice?: null
    ): ProductPaidEventFilter;
    ProductPaid(
      from?: string | null,
      productId?: BigNumberish | null,
      quantity?: null,
      productPrice?: null
    ): ProductPaidEventFilter;

    "ProductRemoved(uint32)"(
      productId?: BigNumberish | null
    ): ProductRemovedEventFilter;
    ProductRemoved(productId?: BigNumberish | null): ProductRemovedEventFilter;

    "SLCPaid(uint32[],uint16[],uint256)"(
      serviceIds?: null,
      quantities?: null,
      amount?: null
    ): SLCPaidEventFilter;
    SLCPaid(
      serviceIds?: null,
      quantities?: null,
      amount?: null
    ): SLCPaidEventFilter;

    "TriggeredRelease(address,uint256)"(
      payee?: string | null,
      released?: null
    ): TriggeredReleaseEventFilter;
    TriggeredRelease(
      payee?: string | null,
      released?: null
    ): TriggeredReleaseEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    _addChildrenSlicer(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _addPayees(
      accounts: string[],
      shares_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _initialize(
      tokenId_: BigNumberish,
      slicerCreator_: string,
      minimumShares_: BigNumberish,
      isCollectible_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _payProductFromSlice(
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _payProductFromSlicer(
      tokenId: BigNumberish,
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _updatePayees(
      accountFrom: string,
      accountTo: string,
      transferredShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProduct(
      categoryIndex: BigNumberish,
      price: BigNumberish,
      isUSD: boolean,
      isMultiple: boolean,
      isInfinite: boolean,
      units: BigNumberish,
      data: BytesLike,
      purchaseData: BytesLike,
      subSlicersId_: BigNumberish[],
      subProducts_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPayeeAllowed(
      payee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    paySLC(
      serviceIds: BigNumberish[],
      quantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    productPrice(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    release(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    released(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeProduct(
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProductCategory(
      productId: BigNumberish,
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProductInfo(
      productId: BigNumberish,
      isInfinite: boolean,
      newUnits: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slicerInfo(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toggleUSDPrice(
      productId: BigNumberish,
      isUSD: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalReceived(overrides?: CallOverrides): Promise<BigNumber>;

    unreleased(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    validatePurchase(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addChildrenSlicer(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _addPayees(
      accounts: string[],
      shares_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _initialize(
      tokenId_: BigNumberish,
      slicerCreator_: string,
      minimumShares_: BigNumberish,
      isCollectible_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _payProductFromSlice(
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _payProductFromSlicer(
      tokenId: BigNumberish,
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _updatePayees(
      accountFrom: string,
      accountTo: string,
      transferredShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProduct(
      categoryIndex: BigNumberish,
      price: BigNumberish,
      isUSD: boolean,
      isMultiple: boolean,
      isInfinite: boolean,
      units: BigNumberish,
      data: BytesLike,
      purchaseData: BytesLike,
      subSlicersId_: BigNumberish[],
      subProducts_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPayeeAllowed(
      payee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paySLC(
      serviceIds: BigNumberish[],
      quantities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    productPrice(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    release(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    released(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeProduct(
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProductCategory(
      productId: BigNumberish,
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProductInfo(
      productId: BigNumberish,
      isInfinite: boolean,
      newUnits: BigNumberish,
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slicerInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggleUSDPrice(
      productId: BigNumberish,
      isUSD: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unreleased(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePurchase(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
