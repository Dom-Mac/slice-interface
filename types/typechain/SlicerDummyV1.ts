/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SubSlicerProductsStruct = {
  subSlicerId: BigNumberish;
  subProductId: BigNumberish;
};

export type SubSlicerProductsStructOutput = [BigNumber, number] & {
  subSlicerId: BigNumber;
  subProductId: number;
};

export type CurrencyPriceStruct = {
  currency: string;
  dynamicPrice: boolean;
  price: BigNumberish;
};

export type CurrencyPriceStructOutput = [string, boolean, BigNumber] & {
  currency: string;
  dynamicPrice: boolean;
  price: BigNumber;
};

export type FunctionStruct = {
  contractAddress: string;
  checkFunctionSignature: BytesLike;
  execFunctionSignature: BytesLike;
  data: BytesLike;
  value: BigNumberish;
};

export type FunctionStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber
] & {
  contractAddress: string;
  checkFunctionSignature: string;
  execFunctionSignature: string;
  data: string;
  value: BigNumber;
};

export type CurrencyPaymentStruct = {
  slicerAddress: string;
  currencyPrice: BigNumberish;
};

export type CurrencyPaymentStructOutput = [string, BigNumber] & {
  slicerAddress: string;
  currencyPrice: BigNumber;
};

export type PayeeStruct = { account: string; shares: BigNumberish };

export type PayeeStructOutput = [string, BigNumber] & {
  account: string;
  shares: BigNumber;
};

export type ProductParamsStruct = {
  categoryIndex: BigNumberish;
  isFree: boolean;
  isMultiple: boolean;
  isInfinite: boolean;
  units: BigNumberish;
  data: BytesLike;
  purchaseData: BytesLike;
  subSlicerProducts: SubSlicerProductsStruct[];
  currencyPrices: CurrencyPriceStruct[];
};

export type ProductParamsStructOutput = [
  number,
  boolean,
  boolean,
  boolean,
  number,
  string,
  string,
  SubSlicerProductsStructOutput[],
  CurrencyPriceStructOutput[]
] & {
  categoryIndex: number;
  isFree: boolean;
  isMultiple: boolean;
  isInfinite: boolean;
  units: number;
  data: string;
  purchaseData: string;
  subSlicerProducts: SubSlicerProductsStructOutput[];
  currencyPrices: CurrencyPriceStructOutput[];
};

export interface SlicerDummyV1Interface extends utils.Interface {
  contractName: "SlicerDummyV1";
  functions: {
    "_addChildrenSlicer(uint256)": FunctionFragment;
    "_addTokenContract(address)": FunctionFragment;
    "_handle1155Purchase(bytes)": FunctionFragment;
    "_handle721Purchase(bytes)": FunctionFragment;
    "_initialize(uint256,address,uint256,address[],bool,(address,uint256)[])": FunctionFragment;
    "_setCustomFee(bool,uint16)": FunctionFragment;
    "_setTotalShares(uint256)": FunctionFragment;
    "_updatePayees(address,address,uint256)": FunctionFragment;
    "addProduct((uint32,bool,bool,bool,uint32,bytes,bytes,(uint256,uint32)[],(address,bool,uint256)[]),(address,bytes4,bytes4,bytes,uint256))": FunctionFragment;
    "isPayeeAllowed(address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "payProduct(address,uint32,uint32,address,uint256)": FunctionFragment;
    "productExists(uint32)": FunctionFragment;
    "productPrice(uint32,address,bool)": FunctionFragment;
    "release(address,address)": FunctionFragment;
    "removeProduct(uint32)": FunctionFragment;
    "setProductCategory(uint32,uint32)": FunctionFragment;
    "setProductInfo(uint32,bool,bool,uint32,(address,bool,uint256)[])": FunctionFragment;
    "slicerInfo()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "testDummy()": FunctionFragment;
    "totalReceived(address)": FunctionFragment;
    "totalSubProducts(uint32)": FunctionFragment;
    "unreleased(address,address)": FunctionFragment;
    "validatePurchase(uint32)": FunctionFragment;
    "validatePurchaseUnits(address,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_addChildrenSlicer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_addTokenContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_handle1155Purchase",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_handle721Purchase",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_initialize",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      string[],
      boolean,
      PayeeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCustomFee",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setTotalShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_updatePayees",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addProduct",
    values: [ProductParamsStruct, FunctionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isPayeeAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "payProduct",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productPrice",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductCategory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductInfo",
    values: [
      BigNumberish,
      boolean,
      boolean,
      BigNumberish,
      CurrencyPriceStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slicerInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "testDummy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalReceived",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubProducts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unreleased",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePurchase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePurchaseUnits",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_addChildrenSlicer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_addTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_handle1155Purchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_handle721Purchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_initialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCustomFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setTotalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updatePayees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPayeeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slicerInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testDummy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unreleased", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatePurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePurchaseUnits",
    data: BytesLike
  ): Result;

  events: {
    "AddedChildrenSlicer(uint256)": EventFragment;
    "CustomFeeSet(bool,uint16)": EventFragment;
    "ERC1155BatchReceived(address,address,uint256[],uint256[])": EventFragment;
    "ERC1155ListingChanged(address,uint256,uint256)": EventFragment;
    "ERC1155Received(address,address,uint256,uint256)": EventFragment;
    "ERC721ListingChanged(address,uint256,bool)": EventFragment;
    "ERC721Received(address,address,uint256)": EventFragment;
    "PaymentReceived(address,uint256)": EventFragment;
    "ProductAdded(uint32,uint32,bool,bool,bool,uint32,address,bytes,tuple[],tuple[],tuple)": EventFragment;
    "ProductCategoryChanged(uint32,uint32)": EventFragment;
    "ProductCurrencyChanged(uint32,uint256,bool)": EventFragment;
    "ProductInfoChanged(uint32,bool,bool,uint32,tuple[])": EventFragment;
    "ProductPaid(address,uint32,uint32,address,tuple[],uint256)": EventFragment;
    "ProductRemoved(uint32)": EventFragment;
    "Released(address,address,uint256,uint256)": EventFragment;
    "TokenContractAdded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedChildrenSlicer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CustomFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155BatchReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155ListingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721ListingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductCategoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductCurrencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductInfoChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenContractAdded"): EventFragment;
}

export type AddedChildrenSlicerEvent = TypedEvent<
  [BigNumber],
  { slicerId: BigNumber }
>;

export type AddedChildrenSlicerEventFilter =
  TypedEventFilter<AddedChildrenSlicerEvent>;

export type CustomFeeSetEvent = TypedEvent<
  [boolean, number],
  { customFeeActive: boolean; customFee: number }
>;

export type CustomFeeSetEventFilter = TypedEventFilter<CustomFeeSetEvent>;

export type ERC1155BatchReceivedEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[]],
  {
    contractAddress: string;
    from: string;
    tokenIds: BigNumber[];
    amounts: BigNumber[];
  }
>;

export type ERC1155BatchReceivedEventFilter =
  TypedEventFilter<ERC1155BatchReceivedEvent>;

export type ERC1155ListingChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { contractAddress: string; tokenId: BigNumber; currentAmount: BigNumber }
>;

export type ERC1155ListingChangedEventFilter =
  TypedEventFilter<ERC1155ListingChangedEvent>;

export type ERC1155ReceivedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    contractAddress: string;
    from: string;
    tokenId: BigNumber;
    amount: BigNumber;
  }
>;

export type ERC1155ReceivedEventFilter = TypedEventFilter<ERC1155ReceivedEvent>;

export type ERC721ListingChangedEvent = TypedEvent<
  [string, BigNumber, boolean],
  { contractAddress: string; tokenId: BigNumber; isActive: boolean }
>;

export type ERC721ListingChangedEventFilter =
  TypedEventFilter<ERC721ListingChangedEvent>;

export type ERC721ReceivedEvent = TypedEvent<
  [string, string, BigNumber],
  { contractAddress: string; from: string; tokenId: BigNumber }
>;

export type ERC721ReceivedEventFilter = TypedEventFilter<ERC721ReceivedEvent>;

export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export type ProductAddedEvent = TypedEvent<
  [
    number,
    number,
    boolean,
    boolean,
    boolean,
    number,
    string,
    string,
    SubSlicerProductsStructOutput[],
    CurrencyPriceStructOutput[],
    FunctionStructOutput
  ],
  {
    productId: number;
    categoryIndex: number;
    isFree: boolean;
    isMultiple: boolean;
    isInfinite: boolean;
    availableUnits: number;
    creator: string;
    data: string;
    subSlicerProducts: SubSlicerProductsStructOutput[];
    currencyPrices: CurrencyPriceStructOutput[];
    externalCall: FunctionStructOutput;
  }
>;

export type ProductAddedEventFilter = TypedEventFilter<ProductAddedEvent>;

export type ProductCategoryChangedEvent = TypedEvent<
  [number, number],
  { productId: number; categoryIndex: number }
>;

export type ProductCategoryChangedEventFilter =
  TypedEventFilter<ProductCategoryChangedEvent>;

export type ProductCurrencyChangedEvent = TypedEvent<
  [number, BigNumber, boolean],
  { productId: number; productPrice: BigNumber; isUSD: boolean }
>;

export type ProductCurrencyChangedEventFilter =
  TypedEventFilter<ProductCurrencyChangedEvent>;

export type ProductInfoChangedEvent = TypedEvent<
  [number, boolean, boolean, number, CurrencyPriceStructOutput[]],
  {
    productId: number;
    isFree: boolean;
    isInfinite: boolean;
    units: number;
    currencyPrices: CurrencyPriceStructOutput[];
  }
>;

export type ProductInfoChangedEventFilter =
  TypedEventFilter<ProductInfoChangedEvent>;

export type ProductPaidEvent = TypedEvent<
  [string, number, number, string, CurrencyPaymentStructOutput[], BigNumber],
  {
    buyer: string;
    productId: number;
    quantity: number;
    currency: string;
    paymentCurrency: CurrencyPaymentStructOutput[];
    paymentEth: BigNumber;
  }
>;

export type ProductPaidEventFilter = TypedEventFilter<ProductPaidEvent>;

export type ProductRemovedEvent = TypedEvent<[number], { productId: number }>;

export type ProductRemovedEventFilter = TypedEventFilter<ProductRemovedEvent>;

export type ReleasedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    payee: string;
    contractAddress: string;
    amountReleased: BigNumber;
    protocolPayment: BigNumber;
  }
>;

export type ReleasedEventFilter = TypedEventFilter<ReleasedEvent>;

export type TokenContractAddedEvent = TypedEvent<
  [string],
  { tokenContract: string }
>;

export type TokenContractAddedEventFilter =
  TypedEventFilter<TokenContractAddedEvent>;

export interface SlicerDummyV1 extends BaseContract {
  contractName: "SlicerDummyV1";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SlicerDummyV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addChildrenSlicer(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _addTokenContract(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _handle1155Purchase(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _handle721Purchase(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _initialize(
      tokenId_: BigNumberish,
      slicerController_: string,
      minimumShares_: BigNumberish,
      currencies_: string[],
      isImmutable_: boolean,
      payees: PayeeStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setCustomFee(
      customFeeActive: boolean,
      customFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setTotalShares(
      totalShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _updatePayees(
      sender: string,
      receiver: string,
      transferredShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProduct(
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPayeeAllowed(
      payee: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payProduct(
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      currency: string,
      slicerIdSender: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    productExists(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    productPrice(
      productId: BigNumberish,
      currency: string,
      onlyFallback: boolean,
      overrides?: CallOverrides
    ): Promise<
      [CurrencyPaymentStructOutput[], BigNumber] & {
        currencyPayments: CurrencyPaymentStructOutput[];
        ethPrice: BigNumber;
      }
    >;

    release(
      account: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeProduct(
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProductCategory(
      productId: BigNumberish,
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProductInfo(
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slicerInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, BigNumber] & {
        tokenId: BigNumber;
        version: number;
        creator: string;
        minimumShares: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testDummy(overrides?: CallOverrides): Promise<[number]>;

    totalReceived(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSubProducts(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unreleased(
      account: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validatePurchase(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;

    validatePurchaseUnits(
      account: string,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { purchases: BigNumber }>;
  };

  _addChildrenSlicer(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _addTokenContract(
    tokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _handle1155Purchase(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _handle721Purchase(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _initialize(
    tokenId_: BigNumberish,
    slicerController_: string,
    minimumShares_: BigNumberish,
    currencies_: string[],
    isImmutable_: boolean,
    payees: PayeeStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setCustomFee(
    customFeeActive: boolean,
    customFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setTotalShares(
    totalShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _updatePayees(
    sender: string,
    receiver: string,
    transferredShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProduct(
    params: ProductParamsStruct,
    externalCall_: FunctionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPayeeAllowed(payee: string, overrides?: CallOverrides): Promise<boolean>;

  onERC1155BatchReceived(
    arg0: string,
    from: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    from: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    from: string,
    tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payProduct(
    account: string,
    productId: BigNumberish,
    quantity: BigNumberish,
    currency: string,
    slicerIdSender: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  productExists(
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  productPrice(
    productId: BigNumberish,
    currency: string,
    onlyFallback: boolean,
    overrides?: CallOverrides
  ): Promise<
    [CurrencyPaymentStructOutput[], BigNumber] & {
      currencyPayments: CurrencyPaymentStructOutput[];
      ethPrice: BigNumber;
    }
  >;

  release(
    account: string,
    contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeProduct(
    productId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProductCategory(
    productId: BigNumberish,
    categoryIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProductInfo(
    productId: BigNumberish,
    isFree: boolean,
    isInfinite: boolean,
    newUnits: BigNumberish,
    currencyPrices: CurrencyPriceStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slicerInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, string, BigNumber] & {
      tokenId: BigNumber;
      version: number;
      creator: string;
      minimumShares: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testDummy(overrides?: CallOverrides): Promise<number>;

  totalReceived(
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSubProducts(
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unreleased(
    account: string,
    contractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validatePurchase(
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
  >;

  validatePurchaseUnits(
    account: string,
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _addChildrenSlicer(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _addTokenContract(
      tokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _handle1155Purchase(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    _handle721Purchase(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    _initialize(
      tokenId_: BigNumberish,
      slicerController_: string,
      minimumShares_: BigNumberish,
      currencies_: string[],
      isImmutable_: boolean,
      payees: PayeeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setCustomFee(
      customFeeActive: boolean,
      customFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setTotalShares(
      totalShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _updatePayees(
      sender: string,
      receiver: string,
      transferredShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addProduct(
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isPayeeAllowed(payee: string, overrides?: CallOverrides): Promise<boolean>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    payProduct(
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      currency: string,
      slicerIdSender: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CurrencyPaymentStructOutput[]>;

    productExists(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    productPrice(
      productId: BigNumberish,
      currency: string,
      onlyFallback: boolean,
      overrides?: CallOverrides
    ): Promise<
      [CurrencyPaymentStructOutput[], BigNumber] & {
        currencyPayments: CurrencyPaymentStructOutput[];
        ethPrice: BigNumber;
      }
    >;

    release(
      account: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProductCategory(
      productId: BigNumberish,
      categoryIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProductInfo(
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    slicerInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, string, BigNumber] & {
        tokenId: BigNumber;
        version: number;
        creator: string;
        minimumShares: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testDummy(overrides?: CallOverrides): Promise<number>;

    totalReceived(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSubProducts(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unreleased(
      account: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePurchase(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;

    validatePurchaseUnits(
      account: string,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddedChildrenSlicer(uint256)"(
      slicerId?: BigNumberish | null
    ): AddedChildrenSlicerEventFilter;
    AddedChildrenSlicer(
      slicerId?: BigNumberish | null
    ): AddedChildrenSlicerEventFilter;

    "CustomFeeSet(bool,uint16)"(
      customFeeActive?: null,
      customFee?: null
    ): CustomFeeSetEventFilter;
    CustomFeeSet(
      customFeeActive?: null,
      customFee?: null
    ): CustomFeeSetEventFilter;

    "ERC1155BatchReceived(address,address,uint256[],uint256[])"(
      contractAddress?: string | null,
      from?: string | null,
      tokenIds?: null,
      amounts?: null
    ): ERC1155BatchReceivedEventFilter;
    ERC1155BatchReceived(
      contractAddress?: string | null,
      from?: string | null,
      tokenIds?: null,
      amounts?: null
    ): ERC1155BatchReceivedEventFilter;

    "ERC1155ListingChanged(address,uint256,uint256)"(
      contractAddress?: string | null,
      tokenId?: null,
      currentAmount?: null
    ): ERC1155ListingChangedEventFilter;
    ERC1155ListingChanged(
      contractAddress?: string | null,
      tokenId?: null,
      currentAmount?: null
    ): ERC1155ListingChangedEventFilter;

    "ERC1155Received(address,address,uint256,uint256)"(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null,
      amount?: null
    ): ERC1155ReceivedEventFilter;
    ERC1155Received(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null,
      amount?: null
    ): ERC1155ReceivedEventFilter;

    "ERC721ListingChanged(address,uint256,bool)"(
      contractAddress?: string | null,
      tokenId?: null,
      isActive?: null
    ): ERC721ListingChangedEventFilter;
    ERC721ListingChanged(
      contractAddress?: string | null,
      tokenId?: null,
      isActive?: null
    ): ERC721ListingChangedEventFilter;

    "ERC721Received(address,address,uint256)"(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null
    ): ERC721ReceivedEventFilter;
    ERC721Received(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null
    ): ERC721ReceivedEventFilter;

    "PaymentReceived(address,uint256)"(
      from?: string | null,
      amount?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(
      from?: string | null,
      amount?: null
    ): PaymentReceivedEventFilter;

    "ProductAdded(uint32,uint32,bool,bool,bool,uint32,address,bytes,tuple[],tuple[],tuple)"(
      productId?: BigNumberish | null,
      categoryIndex?: BigNumberish | null,
      isFree?: null,
      isMultiple?: null,
      isInfinite?: null,
      availableUnits?: null,
      creator?: string | null,
      data?: null,
      subSlicerProducts?: null,
      currencyPrices?: null,
      externalCall?: null
    ): ProductAddedEventFilter;
    ProductAdded(
      productId?: BigNumberish | null,
      categoryIndex?: BigNumberish | null,
      isFree?: null,
      isMultiple?: null,
      isInfinite?: null,
      availableUnits?: null,
      creator?: string | null,
      data?: null,
      subSlicerProducts?: null,
      currencyPrices?: null,
      externalCall?: null
    ): ProductAddedEventFilter;

    "ProductCategoryChanged(uint32,uint32)"(
      productId?: BigNumberish | null,
      categoryIndex?: null
    ): ProductCategoryChangedEventFilter;
    ProductCategoryChanged(
      productId?: BigNumberish | null,
      categoryIndex?: null
    ): ProductCategoryChangedEventFilter;

    "ProductCurrencyChanged(uint32,uint256,bool)"(
      productId?: BigNumberish | null,
      productPrice?: null,
      isUSD?: null
    ): ProductCurrencyChangedEventFilter;
    ProductCurrencyChanged(
      productId?: BigNumberish | null,
      productPrice?: null,
      isUSD?: null
    ): ProductCurrencyChangedEventFilter;

    "ProductInfoChanged(uint32,bool,bool,uint32,tuple[])"(
      productId?: BigNumberish | null,
      isFree?: null,
      isInfinite?: null,
      units?: null,
      currencyPrices?: null
    ): ProductInfoChangedEventFilter;
    ProductInfoChanged(
      productId?: BigNumberish | null,
      isFree?: null,
      isInfinite?: null,
      units?: null,
      currencyPrices?: null
    ): ProductInfoChangedEventFilter;

    "ProductPaid(address,uint32,uint32,address,tuple[],uint256)"(
      buyer?: string | null,
      productId?: BigNumberish | null,
      quantity?: null,
      currency?: null,
      paymentCurrency?: null,
      paymentEth?: null
    ): ProductPaidEventFilter;
    ProductPaid(
      buyer?: string | null,
      productId?: BigNumberish | null,
      quantity?: null,
      currency?: null,
      paymentCurrency?: null,
      paymentEth?: null
    ): ProductPaidEventFilter;

    "ProductRemoved(uint32)"(
      productId?: BigNumberish | null
    ): ProductRemovedEventFilter;
    ProductRemoved(productId?: BigNumberish | null): ProductRemovedEventFilter;

    "Released(address,address,uint256,uint256)"(
      payee?: string | null,
      contractAddress?: string | null,
      amountReleased?: null,
      protocolPayment?: null
    ): ReleasedEventFilter;
    Released(
      payee?: string | null,
      contractAddress?: string | null,
      amountReleased?: null,
      protocolPayment?: null
    ): ReleasedEventFilter;

    "TokenContractAdded(address)"(
      tokenContract?: string | null
    ): TokenContractAddedEventFilter;
    TokenContractAdded(
      tokenContract?: string | null
    ): TokenContractAddedEventFilter;
  };

  estimateGas: {
    _addChildrenSlicer(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _addTokenContract(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _handle1155Purchase(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _handle721Purchase(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _initialize(
      tokenId_: BigNumberish,
      slicerController_: string,
      minimumShares_: BigNumberish,
      currencies_: string[],
      isImmutable_: boolean,
      payees: PayeeStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setCustomFee(
      customFeeActive: boolean,
      customFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setTotalShares(
      totalShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _updatePayees(
      sender: string,
      receiver: string,
      transferredShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProduct(
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPayeeAllowed(
      payee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payProduct(
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      currency: string,
      slicerIdSender: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    productExists(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    productPrice(
      productId: BigNumberish,
      currency: string,
      onlyFallback: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    release(
      account: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeProduct(
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProductCategory(
      productId: BigNumberish,
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProductInfo(
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slicerInfo(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testDummy(overrides?: CallOverrides): Promise<BigNumber>;

    totalReceived(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSubProducts(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unreleased(
      account: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePurchase(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePurchaseUnits(
      account: string,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addChildrenSlicer(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _addTokenContract(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _handle1155Purchase(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _handle721Purchase(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _initialize(
      tokenId_: BigNumberish,
      slicerController_: string,
      minimumShares_: BigNumberish,
      currencies_: string[],
      isImmutable_: boolean,
      payees: PayeeStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setCustomFee(
      customFeeActive: boolean,
      customFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setTotalShares(
      totalShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _updatePayees(
      sender: string,
      receiver: string,
      transferredShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProduct(
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPayeeAllowed(
      payee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      from: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payProduct(
      account: string,
      productId: BigNumberish,
      quantity: BigNumberish,
      currency: string,
      slicerIdSender: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    productExists(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    productPrice(
      productId: BigNumberish,
      currency: string,
      onlyFallback: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    release(
      account: string,
      contractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeProduct(
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProductCategory(
      productId: BigNumberish,
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProductInfo(
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slicerInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testDummy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReceived(
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSubProducts(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unreleased(
      account: string,
      contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePurchase(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePurchaseUnits(
      account: string,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
