/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SubSlicerProductStruct = {
  subSlicerId: BigNumberish;
  subProductId: BigNumberish;
};

export type SubSlicerProductStructOutput = [BigNumber, number] & {
  subSlicerId: BigNumber;
  subProductId: number;
};

export type CurrencyPriceStruct = {
  price: BigNumberish;
  currency: string;
  dynamicPrice: boolean;
};

export type CurrencyPriceStructOutput = [BigNumber, string, boolean] & {
  price: BigNumber;
  currency: string;
  dynamicPrice: boolean;
};

export type FunctionStruct = {
  value: BigNumberish;
  data: BytesLike;
  externalAddress: string;
  checkFunctionSignature: BytesLike;
  execFunctionSignature: BytesLike;
};

export type FunctionStructOutput = [
  BigNumber,
  string,
  string,
  string,
  string
] & {
  value: BigNumber;
  data: string;
  externalAddress: string;
  checkFunctionSignature: string;
  execFunctionSignature: string;
};

export type ProductParamsStruct = {
  categoryIndex: BigNumberish;
  isFree: boolean;
  isMultiple: boolean;
  isInfinite: boolean;
  units: BigNumberish;
  data: BytesLike;
  purchaseData: BytesLike;
  subSlicerProducts: SubSlicerProductStruct[];
  currencyPrices: CurrencyPriceStruct[];
};

export type ProductParamsStructOutput = [
  number,
  boolean,
  boolean,
  boolean,
  BigNumber,
  string,
  string,
  SubSlicerProductStructOutput[],
  CurrencyPriceStructOutput[]
] & {
  categoryIndex: number;
  isFree: boolean;
  isMultiple: boolean;
  isInfinite: boolean;
  units: BigNumber;
  data: string;
  purchaseData: string;
  subSlicerProducts: SubSlicerProductStructOutput[];
  currencyPrices: CurrencyPriceStructOutput[];
};

export type PurchaseStruct = {
  slicerId: BigNumberish;
  quantity: BigNumberish;
  currency: string;
  productId: BigNumberish;
};

export type PurchaseStructOutput = [BigNumber, BigNumber, string, number] & {
  slicerId: BigNumber;
  quantity: BigNumber;
  currency: string;
  productId: number;
};

export interface SlicerProductsInterface extends utils.Interface {
  contractName: "SlicerProducts";
  functions: {
    "_getCurrencyPrice(address,uint256,int16)": FunctionFragment;
    "_getPool(address)": FunctionFragment;
    "_togglePause()": FunctionFragment;
    "addProduct(uint256,(uint32,bool,bool,bool,uint256,bytes,bytes,(uint256,uint32)[],(uint256,address,bool)[]),(uint256,bytes,address,bytes4,bytes4))": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "payProducts(address,(uint256,uint256,address,uint32)[])": FunctionFragment;
    "productPrice(uint256,uint32,address)": FunctionFragment;
    "releaseEthToSlicer(uint256)": FunctionFragment;
    "removeProduct(uint256,uint32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setProductInfo(uint256,uint32,bool,bool,uint256,(uint256,address,bool)[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unreleasedEth(uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validatePurchase(uint256,uint32)": FunctionFragment;
    "validatePurchaseUnits(address,uint256,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_getCurrencyPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_getPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_togglePause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProduct",
    values: [BigNumberish, ProductParamsStruct, FunctionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payProducts",
    values: [string, PurchaseStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "productPrice",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEthToSlicer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProduct",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProductInfo",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      BigNumberish,
      CurrencyPriceStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unreleasedEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePurchase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePurchaseUnits",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getCurrencyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_togglePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEthToSlicer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unreleasedEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePurchaseUnits",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ERC1155ListingChanged(uint256,address,uint256,uint256)": EventFragment;
    "ERC721ListingChanged(uint256,address,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ProductAdded(uint256,uint32,uint32,bool,bool,bool,uint256,address,bytes,tuple[],tuple[],tuple)": EventFragment;
    "ProductInfoChanged(uint256,uint32,bool,bool,uint256,tuple[])": EventFragment;
    "ProductPaid(uint256,uint32,uint256,address,address,uint256,uint256)": EventFragment;
    "ProductRemoved(uint256,uint32)": EventFragment;
    "ReleasedToSlicer(uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155ListingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721ListingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductInfoChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleasedToSlicer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type ERC1155ListingChangedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  {
    slicerId: BigNumber;
    contractAddress: string;
    tokenId: BigNumber;
    currentAmount: BigNumber;
  }
>;

export type ERC1155ListingChangedEventFilter =
  TypedEventFilter<ERC1155ListingChangedEvent>;

export type ERC721ListingChangedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  {
    slicerId: BigNumber;
    contractAddress: string;
    tokenId: BigNumber;
    isActive: boolean;
  }
>;

export type ERC721ListingChangedEventFilter =
  TypedEventFilter<ERC721ListingChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type ProductAddedEvent = TypedEvent<
  [
    BigNumber,
    number,
    number,
    boolean,
    boolean,
    boolean,
    BigNumber,
    string,
    string,
    SubSlicerProductStructOutput[],
    CurrencyPriceStructOutput[],
    FunctionStructOutput
  ],
  {
    slicerId: BigNumber;
    productId: number;
    categoryIndex: number;
    isFree: boolean;
    isMultiple: boolean;
    isInfinite: boolean;
    availableUnits: BigNumber;
    creator: string;
    data: string;
    subSlicerProducts: SubSlicerProductStructOutput[];
    currencyPrices: CurrencyPriceStructOutput[];
    externalCall: FunctionStructOutput;
  }
>;

export type ProductAddedEventFilter = TypedEventFilter<ProductAddedEvent>;

export type ProductInfoChangedEvent = TypedEvent<
  [BigNumber, number, boolean, boolean, BigNumber, CurrencyPriceStructOutput[]],
  {
    slicerId: BigNumber;
    productId: number;
    isFree: boolean;
    isInfinite: boolean;
    newUnits: BigNumber;
    currencyPrices: CurrencyPriceStructOutput[];
  }
>;

export type ProductInfoChangedEventFilter =
  TypedEventFilter<ProductInfoChangedEvent>;

export type ProductPaidEvent = TypedEvent<
  [BigNumber, number, BigNumber, string, string, BigNumber, BigNumber],
  {
    slicerId: BigNumber;
    productId: number;
    quantity: BigNumber;
    buyer: string;
    currency: string;
    paymentEth: BigNumber;
    paymentCurrency: BigNumber;
  }
>;

export type ProductPaidEventFilter = TypedEventFilter<ProductPaidEvent>;

export type ProductRemovedEvent = TypedEvent<
  [BigNumber, number],
  { slicerId: BigNumber; productId: number }
>;

export type ProductRemovedEventFilter = TypedEventFilter<ProductRemovedEvent>;

export type ReleasedToSlicerEvent = TypedEvent<
  [BigNumber, BigNumber],
  { slicerId: BigNumber; ethToRelease: BigNumber }
>;

export type ReleasedToSlicerEventFilter =
  TypedEventFilter<ReleasedToSlicerEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SlicerProducts extends BaseContract {
  contractName: "SlicerProducts";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SlicerProductsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getCurrencyPrice(
      currency: string,
      weiPrice: BigNumberish,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currencyPrice: BigNumber }>;

    _getPool(currency: string, overrides?: CallOverrides): Promise<[string]>;

    _togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addProduct(
      slicerId: BigNumberish,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    payProducts(
      buyer: string,
      purchases: PurchaseStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    productPrice(
      slicerId: BigNumberish,
      productId: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ethPayment: BigNumber;
        currencyPayment: BigNumber;
      }
    >;

    releaseEthToSlicer(
      slicerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeProduct(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProductInfo(
      slicerId: BigNumberish,
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unreleasedEth(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unreleasedAmount: BigNumber }>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validatePurchase(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;

    validatePurchaseUnits(
      account: string,
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { purchases: BigNumber }>;
  };

  _getCurrencyPrice(
    currency: string,
    weiPrice: BigNumberish,
    twapInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getPool(currency: string, overrides?: CallOverrides): Promise<string>;

  _togglePause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addProduct(
    slicerId: BigNumberish,
    params: ProductParamsStruct,
    externalCall_: FunctionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  payProducts(
    buyer: string,
    purchases: PurchaseStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  productPrice(
    slicerId: BigNumberish,
    productId: BigNumberish,
    currency: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      ethPayment: BigNumber;
      currencyPayment: BigNumber;
    }
  >;

  releaseEthToSlicer(
    slicerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeProduct(
    slicerId: BigNumberish,
    productId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProductInfo(
    slicerId: BigNumberish,
    productId: BigNumberish,
    isFree: boolean,
    isInfinite: boolean,
    newUnits: BigNumberish,
    currencyPrices: CurrencyPriceStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unreleasedEth(
    slicerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validatePurchase(
    slicerId: BigNumberish,
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
  >;

  validatePurchaseUnits(
    account: string,
    slicerId: BigNumberish,
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _getCurrencyPrice(
      currency: string,
      weiPrice: BigNumberish,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPool(currency: string, overrides?: CallOverrides): Promise<string>;

    _togglePause(overrides?: CallOverrides): Promise<void>;

    addProduct(
      slicerId: BigNumberish,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    payProducts(
      buyer: string,
      purchases: PurchaseStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    productPrice(
      slicerId: BigNumberish,
      productId: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ethPayment: BigNumber;
        currencyPayment: BigNumber;
      }
    >;

    releaseEthToSlicer(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProduct(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setProductInfo(
      slicerId: BigNumberish,
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unreleasedEth(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validatePurchase(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;

    validatePurchaseUnits(
      account: string,
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "ERC1155ListingChanged(uint256,address,uint256,uint256)"(
      slicerId?: null,
      contractAddress?: string | null,
      tokenId?: null,
      currentAmount?: null
    ): ERC1155ListingChangedEventFilter;
    ERC1155ListingChanged(
      slicerId?: null,
      contractAddress?: string | null,
      tokenId?: null,
      currentAmount?: null
    ): ERC1155ListingChangedEventFilter;

    "ERC721ListingChanged(uint256,address,uint256,bool)"(
      slicerId?: null,
      contractAddress?: string | null,
      tokenId?: null,
      isActive?: null
    ): ERC721ListingChangedEventFilter;
    ERC721ListingChanged(
      slicerId?: null,
      contractAddress?: string | null,
      tokenId?: null,
      isActive?: null
    ): ERC721ListingChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ProductAdded(uint256,uint32,uint32,bool,bool,bool,uint256,address,bytes,tuple[],tuple[],tuple)"(
      slicerId?: null,
      productId?: BigNumberish | null,
      categoryIndex?: BigNumberish | null,
      isFree?: null,
      isMultiple?: null,
      isInfinite?: null,
      availableUnits?: null,
      creator?: string | null,
      data?: null,
      subSlicerProducts?: null,
      currencyPrices?: null,
      externalCall?: null
    ): ProductAddedEventFilter;
    ProductAdded(
      slicerId?: null,
      productId?: BigNumberish | null,
      categoryIndex?: BigNumberish | null,
      isFree?: null,
      isMultiple?: null,
      isInfinite?: null,
      availableUnits?: null,
      creator?: string | null,
      data?: null,
      subSlicerProducts?: null,
      currencyPrices?: null,
      externalCall?: null
    ): ProductAddedEventFilter;

    "ProductInfoChanged(uint256,uint32,bool,bool,uint256,tuple[])"(
      slicerId?: null,
      productId?: BigNumberish | null,
      isFree?: null,
      isInfinite?: null,
      newUnits?: null,
      currencyPrices?: null
    ): ProductInfoChangedEventFilter;
    ProductInfoChanged(
      slicerId?: null,
      productId?: BigNumberish | null,
      isFree?: null,
      isInfinite?: null,
      newUnits?: null,
      currencyPrices?: null
    ): ProductInfoChangedEventFilter;

    "ProductPaid(uint256,uint32,uint256,address,address,uint256,uint256)"(
      slicerId?: null,
      productId?: BigNumberish | null,
      quantity?: null,
      buyer?: string | null,
      currency?: null,
      paymentEth?: null,
      paymentCurrency?: null
    ): ProductPaidEventFilter;
    ProductPaid(
      slicerId?: null,
      productId?: BigNumberish | null,
      quantity?: null,
      buyer?: string | null,
      currency?: null,
      paymentEth?: null,
      paymentCurrency?: null
    ): ProductPaidEventFilter;

    "ProductRemoved(uint256,uint32)"(
      slicerId?: null,
      productId?: BigNumberish | null
    ): ProductRemovedEventFilter;
    ProductRemoved(
      slicerId?: null,
      productId?: BigNumberish | null
    ): ProductRemovedEventFilter;

    "ReleasedToSlicer(uint256,uint256)"(
      slicerId?: null,
      ethToRelease?: null
    ): ReleasedToSlicerEventFilter;
    ReleasedToSlicer(
      slicerId?: null,
      ethToRelease?: null
    ): ReleasedToSlicerEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    _getCurrencyPrice(
      currency: string,
      weiPrice: BigNumberish,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPool(currency: string, overrides?: CallOverrides): Promise<BigNumber>;

    _togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addProduct(
      slicerId: BigNumberish,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    payProducts(
      buyer: string,
      purchases: PurchaseStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    productPrice(
      slicerId: BigNumberish,
      productId: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseEthToSlicer(
      slicerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeProduct(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProductInfo(
      slicerId: BigNumberish,
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unreleasedEth(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validatePurchase(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePurchaseUnits(
      account: string,
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getCurrencyPrice(
      currency: string,
      weiPrice: BigNumberish,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPool(
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addProduct(
      slicerId: BigNumberish,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payProducts(
      buyer: string,
      purchases: PurchaseStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    productPrice(
      slicerId: BigNumberish,
      productId: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseEthToSlicer(
      slicerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeProduct(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProductInfo(
      slicerId: BigNumberish,
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unreleasedEth(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validatePurchase(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePurchaseUnits(
      account: string,
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
