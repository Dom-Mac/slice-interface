/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SlicerTestV0Interface extends utils.Interface {
  contractName: "SlicerTestV0";
  functions: {
    "isProduct(uint32)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "isProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AddedChildrenSlicer(uint256)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ERC1155BatchReceived(address,address,uint256[],uint256[])": EventFragment;
    "ERC1155Received(address,address,uint256,uint256)": EventFragment;
    "ERC721Received(address,address,uint256)": EventFragment;
    "PaymentReceived(address,uint256)": EventFragment;
    "ProductAdded(uint32,uint32,uint256,bool,bool,bool,uint32,address,bytes,uint256[],uint32[])": EventFragment;
    "ProductCategoryChanged(uint32,uint32)": EventFragment;
    "ProductCurrencyChanged(uint32,uint256,bool)": EventFragment;
    "ProductInfoChanged(uint32,bool,uint32,uint256)": EventFragment;
    "ProductPaid(address,uint32,uint16,uint256)": EventFragment;
    "ProductRemoved(uint32)": EventFragment;
    "SLCPaid(uint32[],uint16[],uint256)": EventFragment;
    "TriggeredRelease(address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedChildrenSlicer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155BatchReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductCategoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductCurrencyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductInfoChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SLCPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TriggeredRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AddedChildrenSlicerEvent = TypedEvent<
  [BigNumber],
  { slicerId: BigNumber }
>;

export type AddedChildrenSlicerEventFilter =
  TypedEventFilter<AddedChildrenSlicerEvent>;

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type ERC1155BatchReceivedEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[]],
  {
    contractAddress: string;
    from: string;
    tokenIds: BigNumber[];
    amounts: BigNumber[];
  }
>;

export type ERC1155BatchReceivedEventFilter =
  TypedEventFilter<ERC1155BatchReceivedEvent>;

export type ERC1155ReceivedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    contractAddress: string;
    from: string;
    tokenId: BigNumber;
    amount: BigNumber;
  }
>;

export type ERC1155ReceivedEventFilter = TypedEventFilter<ERC1155ReceivedEvent>;

export type ERC721ReceivedEvent = TypedEvent<
  [string, string, BigNumber],
  { contractAddress: string; from: string; tokenId: BigNumber }
>;

export type ERC721ReceivedEventFilter = TypedEventFilter<ERC721ReceivedEvent>;

export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; amount: BigNumber }
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export type ProductAddedEvent = TypedEvent<
  [
    number,
    number,
    BigNumber,
    boolean,
    boolean,
    boolean,
    number,
    string,
    string,
    BigNumber[],
    number[]
  ],
  {
    productId: number;
    categoryIndex: number;
    price: BigNumber;
    isUSD: boolean;
    isMultiple: boolean;
    isInfinite: boolean;
    availableUnits: number;
    creator: string;
    data: string;
    subSlicersId: BigNumber[];
    subProducts: number[];
  }
>;

export type ProductAddedEventFilter = TypedEventFilter<ProductAddedEvent>;

export type ProductCategoryChangedEvent = TypedEvent<
  [number, number],
  { productId: number; categoryIndex: number }
>;

export type ProductCategoryChangedEventFilter =
  TypedEventFilter<ProductCategoryChangedEvent>;

export type ProductCurrencyChangedEvent = TypedEvent<
  [number, BigNumber, boolean],
  { productId: number; productPrice: BigNumber; isUSD: boolean }
>;

export type ProductCurrencyChangedEventFilter =
  TypedEventFilter<ProductCurrencyChangedEvent>;

export type ProductInfoChangedEvent = TypedEvent<
  [number, boolean, number, BigNumber],
  {
    productId: number;
    isInfinite: boolean;
    units: number;
    productPrice: BigNumber;
  }
>;

export type ProductInfoChangedEventFilter =
  TypedEventFilter<ProductInfoChangedEvent>;

export type ProductPaidEvent = TypedEvent<
  [string, number, number, BigNumber],
  { from: string; productId: number; quantity: number; productPrice: BigNumber }
>;

export type ProductPaidEventFilter = TypedEventFilter<ProductPaidEvent>;

export type ProductRemovedEvent = TypedEvent<[number], { productId: number }>;

export type ProductRemovedEventFilter = TypedEventFilter<ProductRemovedEvent>;

export type SLCPaidEvent = TypedEvent<
  [number[], number[], BigNumber],
  { serviceIds: number[]; quantities: number[]; amount: BigNumber }
>;

export type SLCPaidEventFilter = TypedEventFilter<SLCPaidEvent>;

export type TriggeredReleaseEvent = TypedEvent<
  [string, BigNumber],
  { payee: string; released: BigNumber }
>;

export type TriggeredReleaseEventFilter =
  TypedEventFilter<TriggeredReleaseEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SlicerTestV0 extends BaseContract {
  contractName: "SlicerTestV0";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SlicerTestV0Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  isProduct(productId: BigNumberish, overrides?: CallOverrides): Promise<void>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    isProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedChildrenSlicer(uint256)"(
      slicerId?: BigNumberish | null
    ): AddedChildrenSlicerEventFilter;
    AddedChildrenSlicer(
      slicerId?: BigNumberish | null
    ): AddedChildrenSlicerEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "ERC1155BatchReceived(address,address,uint256[],uint256[])"(
      contractAddress?: string | null,
      from?: string | null,
      tokenIds?: null,
      amounts?: null
    ): ERC1155BatchReceivedEventFilter;
    ERC1155BatchReceived(
      contractAddress?: string | null,
      from?: string | null,
      tokenIds?: null,
      amounts?: null
    ): ERC1155BatchReceivedEventFilter;

    "ERC1155Received(address,address,uint256,uint256)"(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null,
      amount?: null
    ): ERC1155ReceivedEventFilter;
    ERC1155Received(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null,
      amount?: null
    ): ERC1155ReceivedEventFilter;

    "ERC721Received(address,address,uint256)"(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null
    ): ERC721ReceivedEventFilter;
    ERC721Received(
      contractAddress?: string | null,
      from?: string | null,
      tokenId?: null
    ): ERC721ReceivedEventFilter;

    "PaymentReceived(address,uint256)"(
      from?: string | null,
      amount?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(
      from?: string | null,
      amount?: null
    ): PaymentReceivedEventFilter;

    "ProductAdded(uint32,uint32,uint256,bool,bool,bool,uint32,address,bytes,uint256[],uint32[])"(
      productId?: BigNumberish | null,
      categoryIndex?: BigNumberish | null,
      price?: null,
      isUSD?: null,
      isMultiple?: null,
      isInfinite?: null,
      availableUnits?: null,
      creator?: string | null,
      data?: null,
      subSlicersId?: null,
      subProducts?: null
    ): ProductAddedEventFilter;
    ProductAdded(
      productId?: BigNumberish | null,
      categoryIndex?: BigNumberish | null,
      price?: null,
      isUSD?: null,
      isMultiple?: null,
      isInfinite?: null,
      availableUnits?: null,
      creator?: string | null,
      data?: null,
      subSlicersId?: null,
      subProducts?: null
    ): ProductAddedEventFilter;

    "ProductCategoryChanged(uint32,uint32)"(
      productId?: BigNumberish | null,
      categoryIndex?: null
    ): ProductCategoryChangedEventFilter;
    ProductCategoryChanged(
      productId?: BigNumberish | null,
      categoryIndex?: null
    ): ProductCategoryChangedEventFilter;

    "ProductCurrencyChanged(uint32,uint256,bool)"(
      productId?: BigNumberish | null,
      productPrice?: null,
      isUSD?: null
    ): ProductCurrencyChangedEventFilter;
    ProductCurrencyChanged(
      productId?: BigNumberish | null,
      productPrice?: null,
      isUSD?: null
    ): ProductCurrencyChangedEventFilter;

    "ProductInfoChanged(uint32,bool,uint32,uint256)"(
      productId?: BigNumberish | null,
      isInfinite?: null,
      units?: null,
      productPrice?: null
    ): ProductInfoChangedEventFilter;
    ProductInfoChanged(
      productId?: BigNumberish | null,
      isInfinite?: null,
      units?: null,
      productPrice?: null
    ): ProductInfoChangedEventFilter;

    "ProductPaid(address,uint32,uint16,uint256)"(
      from?: string | null,
      productId?: BigNumberish | null,
      quantity?: null,
      productPrice?: null
    ): ProductPaidEventFilter;
    ProductPaid(
      from?: string | null,
      productId?: BigNumberish | null,
      quantity?: null,
      productPrice?: null
    ): ProductPaidEventFilter;

    "ProductRemoved(uint32)"(
      productId?: BigNumberish | null
    ): ProductRemovedEventFilter;
    ProductRemoved(productId?: BigNumberish | null): ProductRemovedEventFilter;

    "SLCPaid(uint32[],uint16[],uint256)"(
      serviceIds?: null,
      quantities?: null,
      amount?: null
    ): SLCPaidEventFilter;
    SLCPaid(
      serviceIds?: null,
      quantities?: null,
      amount?: null
    ): SLCPaidEventFilter;

    "TriggeredRelease(address,uint256)"(
      payee?: string | null,
      released?: null
    ): TriggeredReleaseEventFilter;
    TriggeredRelease(
      payee?: string | null,
      released?: null
    ): TriggeredReleaseEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    isProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isProduct(
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
