/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SubSlicerProductStruct = {
  subSlicerId: BigNumberish;
  subProductId: BigNumberish;
};

export type SubSlicerProductStructOutput = [BigNumber, number] & {
  subSlicerId: BigNumber;
  subProductId: number;
};

export type CurrencyPriceStruct = {
  price: BigNumberish;
  currency: string;
  dynamicPrice: boolean;
};

export type CurrencyPriceStructOutput = [BigNumber, string, boolean] & {
  price: BigNumber;
  currency: string;
  dynamicPrice: boolean;
};

export type ProductParamsStruct = {
  categoryIndex: BigNumberish;
  isFree: boolean;
  isMultiple: boolean;
  isInfinite: boolean;
  units: BigNumberish;
  data: BytesLike;
  purchaseData: BytesLike;
  subSlicerProducts: SubSlicerProductStruct[];
  currencyPrices: CurrencyPriceStruct[];
};

export type ProductParamsStructOutput = [
  number,
  boolean,
  boolean,
  boolean,
  BigNumber,
  string,
  string,
  SubSlicerProductStructOutput[],
  CurrencyPriceStructOutput[]
] & {
  categoryIndex: number;
  isFree: boolean;
  isMultiple: boolean;
  isInfinite: boolean;
  units: BigNumber;
  data: string;
  purchaseData: string;
  subSlicerProducts: SubSlicerProductStructOutput[];
  currencyPrices: CurrencyPriceStructOutput[];
};

export type FunctionStruct = {
  value: BigNumberish;
  data: BytesLike;
  externalAddress: string;
  checkFunctionSignature: BytesLike;
  execFunctionSignature: BytesLike;
};

export type FunctionStructOutput = [
  BigNumber,
  string,
  string,
  string,
  string
] & {
  value: BigNumber;
  data: string;
  externalAddress: string;
  checkFunctionSignature: string;
  execFunctionSignature: string;
};

export type PurchaseStruct = {
  slicerId: BigNumberish;
  quantity: BigNumberish;
  currency: string;
  productId: BigNumberish;
};

export type PurchaseStructOutput = [BigNumber, BigNumber, string, number] & {
  slicerId: BigNumber;
  quantity: BigNumber;
  currency: string;
  productId: number;
};

export interface ISlicerProductsInterface extends utils.Interface {
  contractName: "ISlicerProducts";
  functions: {
    "addProduct(uint256,(uint32,bool,bool,bool,uint256,bytes,bytes,(uint256,uint32)[],(uint256,address,bool)[]),(uint256,bytes,address,bytes4,bytes4))": FunctionFragment;
    "payProducts(address,(uint256,uint256,address,uint32)[])": FunctionFragment;
    "productPrice(uint256,uint32,address)": FunctionFragment;
    "releaseEthToSlicer(uint256)": FunctionFragment;
    "removeProduct(uint256,uint32)": FunctionFragment;
    "setProductInfo(uint256,uint32,bool,bool,uint256,(uint256,address,bool)[])": FunctionFragment;
    "unreleasedEth(uint256)": FunctionFragment;
    "validatePurchase(uint256,uint32)": FunctionFragment;
    "validatePurchaseUnits(address,uint256,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addProduct",
    values: [BigNumberish, ProductParamsStruct, FunctionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "payProducts",
    values: [string, PurchaseStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "productPrice",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEthToSlicer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProduct",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductInfo",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
      BigNumberish,
      CurrencyPriceStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unreleasedEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePurchase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePurchaseUnits",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEthToSlicer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unreleasedEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePurchaseUnits",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISlicerProducts extends BaseContract {
  contractName: "ISlicerProducts";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISlicerProductsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addProduct(
      slicerId: BigNumberish,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payProducts(
      buyer: string,
      purchases: PurchaseStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    productPrice(
      slicerId: BigNumberish,
      productId: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ethPayment: BigNumber;
        currencyPayment: BigNumber;
      }
    >;

    releaseEthToSlicer(
      slicerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeProduct(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProductInfo(
      slicerId: BigNumberish,
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unreleasedEth(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { unreleasedAmount: BigNumber }>;

    validatePurchase(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;

    validatePurchaseUnits(
      account: string,
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { purchases: BigNumber }>;
  };

  addProduct(
    slicerId: BigNumberish,
    params: ProductParamsStruct,
    externalCall_: FunctionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payProducts(
    buyer: string,
    purchases: PurchaseStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  productPrice(
    slicerId: BigNumberish,
    productId: BigNumberish,
    currency: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      ethPayment: BigNumber;
      currencyPayment: BigNumber;
    }
  >;

  releaseEthToSlicer(
    slicerId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeProduct(
    slicerId: BigNumberish,
    productId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProductInfo(
    slicerId: BigNumberish,
    productId: BigNumberish,
    isFree: boolean,
    isInfinite: boolean,
    newUnits: BigNumberish,
    currencyPrices: CurrencyPriceStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unreleasedEth(
    slicerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validatePurchase(
    slicerId: BigNumberish,
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
  >;

  validatePurchaseUnits(
    account: string,
    slicerId: BigNumberish,
    productId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addProduct(
      slicerId: BigNumberish,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    payProducts(
      buyer: string,
      purchases: PurchaseStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    productPrice(
      slicerId: BigNumberish,
      productId: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        ethPayment: BigNumber;
        currencyPayment: BigNumber;
      }
    >;

    releaseEthToSlicer(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProduct(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProductInfo(
      slicerId: BigNumberish,
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    unreleasedEth(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePurchase(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { purchases: BigNumber; purchaseData: string }
    >;

    validatePurchaseUnits(
      account: string,
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addProduct(
      slicerId: BigNumberish,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payProducts(
      buyer: string,
      purchases: PurchaseStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    productPrice(
      slicerId: BigNumberish,
      productId: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseEthToSlicer(
      slicerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeProduct(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProductInfo(
      slicerId: BigNumberish,
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unreleasedEth(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePurchase(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePurchaseUnits(
      account: string,
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProduct(
      slicerId: BigNumberish,
      params: ProductParamsStruct,
      externalCall_: FunctionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payProducts(
      buyer: string,
      purchases: PurchaseStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    productPrice(
      slicerId: BigNumberish,
      productId: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseEthToSlicer(
      slicerId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeProduct(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProductInfo(
      slicerId: BigNumberish,
      productId: BigNumberish,
      isFree: boolean,
      isInfinite: boolean,
      newUnits: BigNumberish,
      currencyPrices: CurrencyPriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unreleasedEth(
      slicerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePurchase(
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePurchaseUnits(
      account: string,
      slicerId: BigNumberish,
      productId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
