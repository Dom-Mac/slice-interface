/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SliceProdInterface extends utils.Interface {
  contractName: "SliceProd";
  functions: {
    "_addToSliceCategory(uint32)": FunctionFragment;
    "_beforeTransfer(address,address,address[],uint256[])": FunctionFragment;
    "_implementation()": FunctionFragment;
    "_togglePause()": FunctionFragment;
    "_upgradeSlicers(address)": FunctionFragment;
    "getEthUsd()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "payProducts(address[],uint32[],uint16[])": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "slice(address[],uint256[],uint256,bool)": FunctionFragment;
    "slicers(uint256)": FunctionFragment;
    "totalTokens()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "triggerRelease(address,address[],uint8)": FunctionFragment;
    "unreleasedBatch(address,address[])": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_addToSliceCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_beforeTransfer",
    values: [string, string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_togglePause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_upgradeSlicers",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getEthUsd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payProducts",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slice",
    values: [string[], BigNumberish[], BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "slicers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerRelease",
    values: [string, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unreleasedBatch",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_addToSliceCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_beforeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_togglePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_upgradeSlicers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEthUsd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slicers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unreleasedBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ProductsPaid(address[],uint32[],uint16[],uint256)": EventFragment;
    "TokenSliced(address,uint256,address[],uint256[],uint256,bool)": EventFragment;
    "TriggeredRelease(address,uint256,uint8)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductsPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSliced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TriggeredRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type ProductsPaidEvent = TypedEvent<
  [string[], number[], number[], BigNumber],
  {
    slicerAddresses: string[];
    productIds: number[];
    quantities: number[];
    totalPaid: BigNumber;
  }
>;

export type ProductsPaidEventFilter = TypedEventFilter<ProductsPaidEvent>;

export type TokenSlicedEvent = TypedEvent<
  [string, BigNumber, string[], BigNumber[], BigNumber, boolean],
  {
    slicerAddress: string;
    tokenId: BigNumber;
    payees: string[];
    shares: BigNumber[];
    minimumShares: BigNumber;
    isCollectible: boolean;
  }
>;

export type TokenSlicedEventFilter = TypedEventFilter<TokenSlicedEvent>;

export type TriggeredReleaseEvent = TypedEvent<
  [string, BigNumber, number],
  { account: string; totalReleased: BigNumber; slicerPercentage: number }
>;

export type TriggeredReleaseEventFilter =
  TypedEventFilter<TriggeredReleaseEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SliceProd extends BaseContract {
  contractName: "SliceProd";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SliceProdInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _addToSliceCategory(
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _beforeTransfer(
      from: string,
      to: string,
      slicerAddresses: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _implementation(overrides?: CallOverrides): Promise<[string]>;

    _togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _upgradeSlicers(
      newLogicImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEthUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      SLCAddress: string,
      sliceCoreAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    payProducts(
      slicerAddresses: string[],
      productIds: BigNumberish[],
      quantities: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slice(
      accounts: string[],
      shares: BigNumberish[],
      minimumShares: BigNumberish,
      isCollectible: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slicers(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    triggerRelease(
      account: string,
      slicerAddresses: string[],
      slicerPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unreleasedBatch(
      account: string,
      slicerAddresses: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _addToSliceCategory(
    categoryIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _beforeTransfer(
    from: string,
    to: string,
    slicerAddresses: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _implementation(overrides?: CallOverrides): Promise<string>;

  _togglePause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _upgradeSlicers(
    newLogicImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEthUsd(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    SLCAddress: string,
    sliceCoreAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  payProducts(
    slicerAddresses: string[],
    productIds: BigNumberish[],
    quantities: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slice(
    accounts: string[],
    shares: BigNumberish[],
    minimumShares: BigNumberish,
    isCollectible: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slicers(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalTokens(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  triggerRelease(
    account: string,
    slicerAddresses: string[],
    slicerPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unreleasedBatch(
    account: string,
    slicerAddresses: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _addToSliceCategory(
      categoryIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _beforeTransfer(
      from: string,
      to: string,
      slicerAddresses: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    _implementation(overrides?: CallOverrides): Promise<string>;

    _togglePause(overrides?: CallOverrides): Promise<void>;

    _upgradeSlicers(
      newLogicImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getEthUsd(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      SLCAddress: string,
      sliceCoreAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    payProducts(
      slicerAddresses: string[],
      productIds: BigNumberish[],
      quantities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    slice(
      accounts: string[],
      shares: BigNumberish[],
      minimumShares: BigNumberish,
      isCollectible: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    slicers(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerRelease(
      account: string,
      slicerAddresses: string[],
      slicerPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unreleasedBatch(
      account: string,
      slicerAddresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ProductsPaid(address[],uint32[],uint16[],uint256)"(
      slicerAddresses?: null,
      productIds?: null,
      quantities?: null,
      totalPaid?: null
    ): ProductsPaidEventFilter;
    ProductsPaid(
      slicerAddresses?: null,
      productIds?: null,
      quantities?: null,
      totalPaid?: null
    ): ProductsPaidEventFilter;

    "TokenSliced(address,uint256,address[],uint256[],uint256,bool)"(
      slicerAddress?: null,
      tokenId?: null,
      payees?: null,
      shares?: null,
      minimumShares?: null,
      isCollectible?: null
    ): TokenSlicedEventFilter;
    TokenSliced(
      slicerAddress?: null,
      tokenId?: null,
      payees?: null,
      shares?: null,
      minimumShares?: null,
      isCollectible?: null
    ): TokenSlicedEventFilter;

    "TriggeredRelease(address,uint256,uint8)"(
      account?: string | null,
      totalReleased?: null,
      slicerPercentage?: null
    ): TriggeredReleaseEventFilter;
    TriggeredRelease(
      account?: string | null,
      totalReleased?: null,
      slicerPercentage?: null
    ): TriggeredReleaseEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    _addToSliceCategory(
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _beforeTransfer(
      from: string,
      to: string,
      slicerAddresses: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _implementation(overrides?: CallOverrides): Promise<BigNumber>;

    _togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _upgradeSlicers(
      newLogicImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEthUsd(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      SLCAddress: string,
      sliceCoreAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    payProducts(
      slicerAddresses: string[],
      productIds: BigNumberish[],
      quantities: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slice(
      accounts: string[],
      shares: BigNumberish[],
      minimumShares: BigNumberish,
      isCollectible: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slicers(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    triggerRelease(
      account: string,
      slicerAddresses: string[],
      slicerPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unreleasedBatch(
      account: string,
      slicerAddresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _addToSliceCategory(
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _beforeTransfer(
      from: string,
      to: string,
      slicerAddresses: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _togglePause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _upgradeSlicers(
      newLogicImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEthUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      SLCAddress: string,
      sliceCoreAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payProducts(
      slicerAddresses: string[],
      productIds: BigNumberish[],
      quantities: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slice(
      accounts: string[],
      shares: BigNumberish[],
      minimumShares: BigNumberish,
      isCollectible: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slicers(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    triggerRelease(
      account: string,
      slicerAddresses: string[],
      slicerPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unreleasedBatch(
      account: string,
      slicerAddresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
