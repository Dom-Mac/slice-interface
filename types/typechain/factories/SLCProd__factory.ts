/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SLCProd, SLCProdInterface } from "../SLCProd";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "slicerAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "slicerPercentage",
        type: "uint8",
      },
    ],
    name: "MintTriggered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "MintedSLC",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "categoryContractId",
        type: "uint32",
      },
    ],
    name: "_mintSLC",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "serviceId",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "slcPrice",
        type: "uint256",
      },
    ],
    name: "_setServicePrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "slicerAddress",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "slicerPercentage",
        type: "uint8",
      },
    ],
    name: "_triggerMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "serviceId",
        type: "uint32",
      },
    ],
    name: "getServicePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sliceCoreAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b50608051611d6d61004c600039600081816104f50152818161053e015281816107120152818161075201526107e50152611d6d6000f3fe60806040526004361061012a5760003560e01c806352d1902d116100ab578063a9059cbb1161006f578063a9059cbb14610335578063c4d66de814610355578063c50fc43714610375578063dd62ed3e14610395578063deb0e991146103db578063f2fde38b146103fb57600080fd5b806352d1902d1461028d57806370a08231146102a25780638da5cb5b146102d857806395d89b4114610300578063a457c2d71461031557600080fd5b80633659cfe6116100f25780633659cfe6146101e55780633941a60414610207578063395093511461023a578063400d31fa1461025a5780634f1ef2861461027a57600080fd5b806306fdde031461012f578063095ea7b31461015a57806318160ddd1461018a57806323b872dd146101a9578063313ce567146101c9575b600080fd5b34801561013b57600080fd5b5061014461041b565b60405161015191906117a0565b60405180910390f35b34801561016657600080fd5b5061017a6101753660046117e8565b6104ad565b6040519015158152602001610151565b34801561019657600080fd5b506035545b604051908152602001610151565b3480156101b557600080fd5b5061017a6101c4366004611814565b6104c5565b3480156101d557600080fd5b5060405160128152602001610151565b3480156101f157600080fd5b50610205610200366004611855565b6104eb565b005b34801561021357600080fd5b5061019b61022236600461188b565b63ffffffff16600090815260fd602052604090205490565b34801561024657600080fd5b5061017a6102553660046117e8565b6105d3565b34801561026657600080fd5b506102056102753660046118a6565b610612565b6102056102883660046118fa565b610708565b34801561029957600080fd5b5061019b6107d8565b3480156102ae57600080fd5b5061019b6102bd366004611855565b6001600160a01b031660009081526033602052604090205490565b3480156102e457600080fd5b5060ca546040516001600160a01b039091168152602001610151565b34801561030c57600080fd5b5061014461088b565b34801561032157600080fd5b5061017a6103303660046117e8565b61089a565b34801561034157600080fd5b5061017a6103503660046117e8565b610937565b34801561036157600080fd5b50610205610370366004611855565b610945565b34801561038157600080fd5b506102056103903660046119be565b610a34565b3480156103a157600080fd5b5061019b6103b03660046119da565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3480156103e757600080fd5b506102056103f6366004611a13565b610a8c565b34801561040757600080fd5b50610205610416366004611855565b610c0e565b60606036805461042a90611a6c565b80601f016020809104026020016040519081016040528092919081815260200182805461045690611a6c565b80156104a35780601f10610478576101008083540402835291602001916104a3565b820191906000526020600020905b81548152906001019060200180831161048657829003601f168201915b5050505050905090565b6000336104bb818585610cff565b5060019392505050565b6000336104d3858285610e23565b6104de858585610eb5565b60019150505b9392505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361053c5760405162461bcd60e51b815260040161053390611aa6565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610585600080516020611cf1833981519152546001600160a01b031690565b6001600160a01b0316146105ab5760405162461bcd60e51b815260040161053390611af2565b6105b481611083565b604080516000808252602082019092526105d0918391906110ad565b50565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091906104bb908290869061060d908790611b54565b610cff565b60ca546001600160a01b03163314806106ad575060fc5460405163588d1be760e01b815263ffffffff831660048201526001600160a01b039091169063588d1be790602401602060405180830381865afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106989190611b6c565b6001600160a01b0316336001600160a01b0316145b6106b657600080fd5b6106c0838361121d565b826001600160a01b03167f6b0f6e93733b0b0b8d5cf4087f58b25241f1a1a9a1d196004fef371df8b24824836040516106fb91815260200190565b60405180910390a2505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107505760405162461bcd60e51b815260040161053390611aa6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610799600080516020611cf1833981519152546001600160a01b031690565b6001600160a01b0316146107bf5760405162461bcd60e51b815260040161053390611af2565b6107c882611083565b6107d4828260016110ad565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108785760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610533565b50600080516020611cf183398151915290565b60606037805461042a90611a6c565b3360008181526034602090815260408083206001600160a01b03871684529091528120549091908381101561091f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610533565b61092c8286868403610cff565b506001949350505050565b6000336104bb818585610eb5565b600054610100900460ff166109605760005460ff1615610964565b303b155b6109805760405162461bcd60e51b815260040161053390611b89565b600054610100900460ff161580156109a2576000805461ffff19166101011790555b6109e460405180604001604052806005815260200164536c69636560d81b81525060405180604001604052806003815260200162534c4360e81b8152506112fc565b6109ed3361132d565b60fc80546001600160a01b0319166001600160a01b038416179055610a1f336c0c9f2c9cd04674edea4000000061121d565b80156107d4576000805461ff00191690555050565b60ca546001600160a01b0316331480610a57575060c9546001600160a01b031633145b610a735760405162461bcd60e51b815260040161053390611bd7565b63ffffffff909116600090815260fd6020526040902055565b60ca546001600160a01b03163314610ab65760405162461bcd60e51b815260040161053390611bd7565b60648160ff161115610b0a5760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420536c696365722070657263656e74616765000000000000006044820152606401610533565b6000610b1560355490565b610b2f6c0c9f2c9cd04674edea4000000062989680611c0c565b610b399190611c2b565b610b44906064611b54565b610b4e9085611c0c565b905060ff821615610bb2578160ff16606414610ba857610b90856064610b748582611c4d565b610b819060ff1685611c0c565b610b8b9190611c2b565b61121d565b610ba3836064610b8160ff861685611c0c565b610bbc565b610ba3838261121d565b610bbc858261121d565b6040805182815260ff841660208201526001600160a01b0380861692908816917f370d437095ad9bf0ea811e8473ef1a6460e4e4d596a5c3c2970d1c0c6c4ed2da910160405180910390a35050505050565b60ca546001600160a01b0316331480610c31575060c9546001600160a01b031633145b610c4d5760405162461bcd60e51b815260040161053390611bd7565b6001600160a01b038116610ca35760405162461bcd60e51b815260206004820152601d60248201527f4e6577206f776e657220697320746865207a65726f20616464726573730000006044820152606401610533565b60ca546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360ca80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316610d615760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610533565b6001600160a01b038216610dc25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610533565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152603460209081526040808320938616835292905220546000198114610eaf5781811015610ea25760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610533565b610eaf8484848403610cff565b50505050565b6001600160a01b038316610f195760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610533565b6001600160a01b038216610f7b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610533565b6001600160a01b03831660009081526033602052604090205481811015610ff35760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610533565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061102a908490611b54565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161107691815260200190565b60405180910390a3610eaf565b60ca546001600160a01b031633146105d05760405162461bcd60e51b815260040161053390611bd7565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156110e5576110e08361139b565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561113f575060408051601f3d908101601f1916820190925261113c91810190611c70565b60015b6111a25760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610533565b600080516020611cf183398151915281146112115760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610533565b506110e0838383611437565b6001600160a01b0382166112735760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610533565b80603560008282546112859190611b54565b90915550506001600160a01b038216600090815260336020526040812080548392906112b2908490611b54565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff166113235760405162461bcd60e51b815260040161053390611c89565b6107d4828261145c565b600054610100900460ff166113485760005460ff161561134c565b303b155b6113685760405162461bcd60e51b815260040161053390611b89565b600054610100900460ff1615801561138a576000805461ffff19166101011790555b6113926114aa565b610a1f826114d3565b6001600160a01b0381163b6114085760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610533565b600080516020611cf183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6114408361156e565b60008251118061144d5750805b156110e057610eaf83836115ae565b600054610100900460ff166114835760405162461bcd60e51b815260040161053390611c89565b81516114969060369060208501906116db565b5080516110e09060379060208401906116db565b600054610100900460ff166114d15760405162461bcd60e51b815260040161053390611c89565b565b600054610100900460ff166114ee5760005460ff16156114f2565b303b155b61150e5760405162461bcd60e51b815260040161053390611b89565b600054610100900460ff16158015611530576000805461ffff19166101011790555b60c980546001600160a01b0384166001600160a01b03199182161790915560ca80549091163317905580156107d4576000805461ff00191690555050565b6115778161139b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6116165760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610533565b600080846001600160a01b0316846040516116319190611cd4565b600060405180830381855af49150503d806000811461166c576040519150601f19603f3d011682016040523d82523d6000602084013e611671565b606091505b50915091506116998282604051806060016040528060278152602001611d11602791396116a2565b95945050505050565b606083156116b15750816104e4565b8251156116c15782518084602001fd5b8160405162461bcd60e51b815260040161053391906117a0565b8280546116e790611a6c565b90600052602060002090601f016020900481019282611709576000855561174f565b82601f1061172257805160ff191683800117855561174f565b8280016001018555821561174f579182015b8281111561174f578251825591602001919060010190611734565b5061175b92915061175f565b5090565b5b8082111561175b5760008155600101611760565b60005b8381101561178f578181015183820152602001611777565b83811115610eaf5750506000910152565b60208152600082518060208401526117bf816040850160208701611774565b601f01601f19169190910160400192915050565b6001600160a01b03811681146105d057600080fd5b600080604083850312156117fb57600080fd5b8235611806816117d3565b946020939093013593505050565b60008060006060848603121561182957600080fd5b8335611834816117d3565b92506020840135611844816117d3565b929592945050506040919091013590565b60006020828403121561186757600080fd5b81356104e4816117d3565b803563ffffffff8116811461188657600080fd5b919050565b60006020828403121561189d57600080fd5b6104e482611872565b6000806000606084860312156118bb57600080fd5b83356118c6816117d3565b9250602084013591506118db60408501611872565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561190d57600080fd5b8235611918816117d3565b9150602083013567ffffffffffffffff8082111561193557600080fd5b818501915085601f83011261194957600080fd5b81358181111561195b5761195b6118e4565b604051601f8201601f19908116603f01168101908382118183101715611983576119836118e4565b8160405282815288602084870101111561199c57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600080604083850312156119d157600080fd5b61180683611872565b600080604083850312156119ed57600080fd5b82356119f8816117d3565b91506020830135611a08816117d3565b809150509250929050565b60008060008060808587031215611a2957600080fd5b8435611a34816117d3565b9350602085013592506040850135611a4b816117d3565b9150606085013560ff81168114611a6157600080fd5b939692955090935050565b600181811c90821680611a8057607f821691505b602082108103611aa057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b6757611b67611b3e565b500190565b600060208284031215611b7e57600080fd5b81516104e4816117d3565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000816000190483118215151615611c2657611c26611b3e565b500290565b600082611c4857634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff841680821015611c6757611c67611b3e565b90039392505050565b600060208284031215611c8257600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251611ce6818460208701611774565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122005899676fd840df3e987702309b1c1c6862d1e22ac040b606d27f1c839d6a8d864736f6c634300080d0033";

type SLCProdConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SLCProdConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SLCProd__factory extends ContractFactory {
  constructor(...args: SLCProdConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SLCProd";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SLCProd> {
    return super.deploy(overrides || {}) as Promise<SLCProd>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SLCProd {
    return super.attach(address) as SLCProd;
  }
  connect(signer: Signer): SLCProd__factory {
    return super.connect(signer) as SLCProd__factory;
  }
  static readonly contractName: "SLCProd";
  public readonly contractName: "SLCProd";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SLCProdInterface {
    return new utils.Interface(_abi) as SLCProdInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SLCProd {
    return new Contract(address, _abi, signerOrProvider) as SLCProd;
  }
}
