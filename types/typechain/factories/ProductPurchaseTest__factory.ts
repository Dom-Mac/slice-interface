/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ProductPurchaseTest,
  ProductPurchaseTestInterface,
} from "../ProductPurchaseTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "address",
        name: "productsModuleAddress_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "slicerId_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Invalid",
    type: "error",
  },
  {
    inputs: [],
    name: "NotAuthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPurchase",
    type: "error",
  },
  {
    inputs: [],
    name: "NotSuccessful",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongSlicer",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "slicerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "productId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "customData",
        type: "bytes",
      },
    ],
    name: "isPurchaseAllowed",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onProductPurchase",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onProductPurchaseData",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onProductPurchasePayable",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "releaseToCollector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162001cb438038062001cb4833981016040819052620000349162000215565b818173f39fd6e51aad88f6f4ce6ab8827279cfffb9226682828888816000908051906020019062000067929190620000a2565b5080516200007d906001906020840190620000a2565b5050506001600160a01b0391821660805260a0521660c05250620002e4945050505050565b828054620000b090620002a8565b90600052602060002090601f016020900481019282620000d457600085556200011f565b82601f10620000ef57805160ff19168380011785556200011f565b828001600101855582156200011f579182015b828111156200011f57825182559160200191906001019062000102565b506200012d92915062000131565b5090565b5b808211156200012d576000815560010162000132565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200017057600080fd5b81516001600160401b03808211156200018d576200018d62000148565b604051601f8301601f19908116603f01168101908282118183101715620001b857620001b862000148565b81604052838152602092508683858801011115620001d557600080fd5b600091505b83821015620001f95785820183015181830184015290820190620001da565b838211156200020b5760008385830101525b9695505050505050565b600080600080608085870312156200022c57600080fd5b84516001600160401b03808211156200024457600080fd5b62000252888389016200015e565b955060208701519150808211156200026957600080fd5b5062000278878288016200015e565b604087015190945090506001600160a01b03811681146200029857600080fd5b6060959095015193969295505050565b600181811c90821680620002bd57607f821691505b602082108103620002de57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c0516119a06200031460003960006108a101526000610b2c01526000610b7401526119a06000f3fe6080604052600436106101095760003560e01c806395d89b4111610095578063bd50638d11610064578063bd50638d146102c8578063c2ed6b66146102dd578063c87b56dd146102f0578063d066474a14610310578063e985e9c51461033257600080fd5b806395d89b411461026057806396238af814610275578063a22cb46514610288578063b88d4fde146102a857600080fd5b8063189ded4d116100dc578063189ded4d146101bf57806323b872dd146101d257806342842e0e146101f25780636352211e1461021257806370a082311461023257600080fd5b806301ffc9a71461010e57806306fdde0314610143578063081812fc14610165578063095ea7b31461019d575b600080fd5b34801561011a57600080fd5b5061012e6101293660046112ed565b61037b565b60405190151581526020015b60405180910390f35b34801561014f57600080fd5b506101586103cd565b60405161013a9190611362565b34801561017157600080fd5b50610185610180366004611375565b61045f565b6040516001600160a01b03909116815260200161013a565b3480156101a957600080fd5b506101bd6101b83660046113a3565b6104f9565b005b6101bd6101cd366004611494565b61060e565b3480156101de57600080fd5b506101bd6101ed3660046114c9565b6106ab565b3480156101fe57600080fd5b506101bd61020d3660046114c9565b6106dc565b34801561021e57600080fd5b5061018561022d366004611375565b6106f7565b34801561023e57600080fd5b5061025261024d36600461150a565b61076e565b60405190815260200161013a565b34801561026c57600080fd5b506101586107f5565b6101bd610283366004611494565b610804565b34801561029457600080fd5b506101bd6102a3366004611527565b610856565b3480156102b457600080fd5b506101bd6102c3366004611565565b610865565b3480156102d457600080fd5b506101bd61089d565b6101bd6102eb366004611494565b610934565b3480156102fc57600080fd5b5061015861030b366004611375565b6109d3565b34801561031c57600080fd5b506101bd61032b3660046115d1565b5050505050565b34801561033e57600080fd5b5061012e61034d36600461163e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806103ac57506001600160e01b03198216635b5e139f60e01b145b806103c757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103dc9061166c565b80601f01602080910402602001604051908101604052809291908181526020018280546104089061166c565b80156104555780601f1061042a57610100808354040283529160200191610455565b820191906000526020600020905b81548152906001019060200180831161043857829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104dd5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610504826106f7565b9050806001600160a01b0316836001600160a01b0316036105715760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104d4565b336001600160a01b038216148061058d575061058d813361034d565b6105ff5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104d4565b6106098383610abb565b505050565b60008060008060008580602001905181019061062a91906116a6565b9450945094509450945061063d85610b29565b61064f82670de0b6b3a7640000611766565b34101561066f57604051636dac6a0960e01b815260040160405180910390fd5b60005b828110156106a25761068c8461068760065490565b610bb2565b61069a600680546001019055565b600101610672565b50505050505050565b6106b53382610bcc565b6106d15760405162461bcd60e51b81526004016104d490611785565b610609838383610cc3565b61060983838360405180602001604052806000815250610865565b6000818152600260205260408120546001600160a01b0316806103c75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104d4565b60006001600160a01b0382166107d95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104d4565b506001600160a01b031660009081526003602052604090205490565b6060600180546103dc9061166c565b60008060008060008580602001905181019061082091906116a6565b9450945094509450945061083385610b29565b6108408361068760065490565b61084e600680546001019055565b505050505050565b610861338383610e5f565b5050565b61086f3383610bcc565b61088b5760405162461bcd60e51b81526004016104d490611785565b61089784848484610f2d565b50505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461090a576040519150601f19603f3d011682016040523d82523d6000602084013e61090f565b606091505b50509050806109315760405163af6eefa360e01b815260040160405180910390fd5b50565b60008060008060008580602001905181019061095091906116a6565b9450945094509450945061096385610b29565b60008180602001905181019061097991906117d6565b90507370997970c51812dc3a010c7d01b50e0d17dc79c86001600160a01b038216146109b85760405163ea8e4eb560e01b815260040160405180910390fd5b6109c58461068760065490565b6106a2600680546001019055565b6000818152600260205260409020546060906001600160a01b0316610a525760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104d4565b6000610a6960408051602081019091526000815290565b90506000815111610a895760405180602001604052806000815250610ab4565b80610a9384610f60565b604051602001610aa49291906117f3565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610af0826106f7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b807f000000000000000000000000000000000000000000000000000000000000000014610b6957604051632eafdb6960e01b815260040160405180910390fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610931576040516347322d0360e01b815260040160405180910390fd5b610861828260405180602001604052806000815250611061565b6000818152600260205260408120546001600160a01b0316610c455760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104d4565b6000610c50836106f7565b9050806001600160a01b0316846001600160a01b03161480610c8b5750836001600160a01b0316610c808461045f565b6001600160a01b0316145b80610cbb57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610cd6826106f7565b6001600160a01b031614610d3a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016104d4565b6001600160a01b038216610d9c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104d4565b610da7600082610abb565b6001600160a01b0383166000908152600360205260408120805460019290610dd0908490611822565b90915550506001600160a01b0382166000908152600360205260408120805460019290610dfe908490611839565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031603610ec05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104d4565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f38848484610cc3565b610f4484848484611094565b6108975760405162461bcd60e51b81526004016104d490611851565b606081600003610f875750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610fb15780610f9b816118a3565b9150610faa9050600a836118d2565b9150610f8b565b60008167ffffffffffffffff811115610fcc57610fcc6113cf565b6040519080825280601f01601f191660200182016040528015610ff6576020820181803683370190505b5090505b8415610cbb5761100b600183611822565b9150611018600a866118e6565b611023906030611839565b60f81b818381518110611038576110386118fa565b60200101906001600160f81b031916908160001a90535061105a600a866118d2565b9450610ffa565b61106b8383611195565b6110786000848484611094565b6106095760405162461bcd60e51b81526004016104d490611851565b60006001600160a01b0384163b1561118a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110d8903390899088908890600401611910565b6020604051808303816000875af1925050508015611113575060408051601f3d908101601f191682019092526111109181019061194d565b60015b611170573d808015611141576040519150601f19603f3d011682016040523d82523d6000602084013e611146565b606091505b5080516000036111685760405162461bcd60e51b81526004016104d490611851565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610cbb565b506001949350505050565b6001600160a01b0382166111eb5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104d4565b6000818152600260205260409020546001600160a01b0316156112505760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104d4565b6001600160a01b0382166000908152600360205260408120805460019290611279908490611839565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461093157600080fd5b6000602082840312156112ff57600080fd5b8135610ab4816112d7565b60005b8381101561132557818101518382015260200161130d565b838111156108975750506000910152565b6000815180845261134e81602086016020860161130a565b601f01601f19169290920160200192915050565b602081526000610ab46020830184611336565b60006020828403121561138757600080fd5b5035919050565b6001600160a01b038116811461093157600080fd5b600080604083850312156113b657600080fd5b82356113c18161138e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561140e5761140e6113cf565b604052919050565b600067ffffffffffffffff821115611430576114306113cf565b50601f01601f191660200190565b600082601f83011261144f57600080fd5b813561146261145d82611416565b6113e5565b81815284602083860101111561147757600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156114a657600080fd5b813567ffffffffffffffff8111156114bd57600080fd5b610cbb8482850161143e565b6000806000606084860312156114de57600080fd5b83356114e98161138e565b925060208401356114f98161138e565b929592945050506040919091013590565b60006020828403121561151c57600080fd5b8135610ab48161138e565b6000806040838503121561153a57600080fd5b82356115458161138e565b91506020830135801515811461155a57600080fd5b809150509250929050565b6000806000806080858703121561157b57600080fd5b84356115868161138e565b935060208501356115968161138e565b925060408501359150606085013567ffffffffffffffff8111156115b957600080fd5b6115c58782880161143e565b91505092959194509250565b600080600080600060a086880312156115e957600080fd5b853594506020860135935060408601356116028161138e565b925060608601359150608086013567ffffffffffffffff81111561162557600080fd5b6116318882890161143e565b9150509295509295909350565b6000806040838503121561165157600080fd5b823561165c8161138e565b9150602083013561155a8161138e565b600181811c9082168061168057607f821691505b6020821081036116a057634e487b7160e01b600052602260045260246000fd5b50919050565b600080600080600060a086880312156116be57600080fd5b855194506020860151935060408601516116d78161138e565b60608701516080880151919450925067ffffffffffffffff8111156116fb57600080fd5b8601601f8101881361170c57600080fd5b805161171a61145d82611416565b81815289602083850101111561172f57600080fd5b61174082602083016020860161130a565b8093505050509295509295909350565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561178057611780611750565b500290565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000602082840312156117e857600080fd5b8151610ab48161138e565b6000835161180581846020880161130a565b83519083019061181981836020880161130a565b01949350505050565b60008282101561183457611834611750565b500390565b6000821982111561184c5761184c611750565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000600182016118b5576118b5611750565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826118e1576118e16118bc565b500490565b6000826118f5576118f56118bc565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061194390830184611336565b9695505050505050565b60006020828403121561195f57600080fd5b8151610ab4816112d756fea26469706673582212207a7b84633673b8cac5f7838eb69bcd3bbccd13b315b1fbfc79cf7812e113ccbd64736f6c634300080d0033";

type ProductPurchaseTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProductPurchaseTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProductPurchaseTest__factory extends ContractFactory {
  constructor(...args: ProductPurchaseTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ProductPurchaseTest";
  }

  deploy(
    name_: string,
    symbol_: string,
    productsModuleAddress_: string,
    slicerId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProductPurchaseTest> {
    return super.deploy(
      name_,
      symbol_,
      productsModuleAddress_,
      slicerId_,
      overrides || {}
    ) as Promise<ProductPurchaseTest>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    productsModuleAddress_: string,
    slicerId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      productsModuleAddress_,
      slicerId_,
      overrides || {}
    );
  }
  attach(address: string): ProductPurchaseTest {
    return super.attach(address) as ProductPurchaseTest;
  }
  connect(signer: Signer): ProductPurchaseTest__factory {
    return super.connect(signer) as ProductPurchaseTest__factory;
  }
  static readonly contractName: "ProductPurchaseTest";
  public readonly contractName: "ProductPurchaseTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProductPurchaseTestInterface {
    return new utils.Interface(_abi) as ProductPurchaseTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProductPurchaseTest {
    return new Contract(address, _abi, signerOrProvider) as ProductPurchaseTest;
  }
}
